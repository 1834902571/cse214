#include <stdio.h>
#include <stdlib.h>

typedef struct Node node;
struct Node
{
    int value;
    node *next;
};

void menu();
void display_queue(node *temp);
void empty();
void queue_size(node *temp);
void top(node *temp);
node* push(node *temp, int value);
node* pop(node *temp);

int main()
{
    menu();

    return 0;
}

void menu()
{
    node *head = NULL; // Create an empty queue.
    int value, option;
    do
    {
        enum Queue_operations {Display = 1,Empty,Size,Top,Push,Pop,Exit};
        system(" cls ");
        printf("\n Choose Operations for 'Queue' from below: \n");
        printf("\n %d : Display Queue",Display);
        printf("\n %d : Empty",Empty);
        printf("\n %d : Size",Size);
        printf("\n %d : Top",Top);
        printf("\n %d : Push",Push);
        printf("\n %d : Pop",Pop);
        printf("\n %d : Exit Program",Exit);

        printf("\n");

        printf("\n Enter your Option : ");
        scanf("%d", &option);

        if(option == 1)
        {
            printf("\n");
            display_queue(head);

            getchar();
            printf("\n\n Press 'Enter' to Continue the program...\n");
            getchar();
        }
        else if(option == 2)
        {
            empty(head);

            getchar();
            printf("\n\n Press 'Enter' to Continue the program...\n");
            getchar();
        }
        else if(option == 3)
        {
            queue_size(head);

            getchar();
            printf("\n\n Press 'Enter' to Continue the program...\n");
            getchar();
        }
        else if (option == 4)
        {
            top(head);

            getchar();
            printf("\n\n Press 'Enter' to Continue the program...\n");
            getchar();
        }
        else if(option == 5)
        {
            printf(" Enter Queue Element : ");
            scanf("%d", &value);

            head = push(head,value);
            printf("\n\t\t*** %d, Data inserted in Queue. ***",value);

            getchar();
            printf("\n\n Press 'Enter' to Continue the program...\n");
            getchar();
        }
        else if(option == 6)
        {
            head = pop(head);

            getchar();
            printf("\n\n Press 'Enter' to Continue the program...\n");
            getchar();
        }
        else if (option == 7)
        {
            exit(0);
        }
        else
        {
            printf("\n\t *** Invalid Option, Please Enter Correct Option Between '1 to 7' ***");

            getchar();
            printf("\n\n Press 'Enter' to Continue the program...\n");
            getchar();
        }
    }
    while(option != 7);
}

void display_queue(node *temp)
{
    if (temp == NULL)
    {
        printf("\t\t*** Queue is empty ***");
        return;
    }
    while (temp != NULL)
    {
        printf("\t%d", temp->value);
        temp = temp->next;
    }
}

/* Function to Display if the Queue is Empty or Not */
void empty(node *temp)
{
    if ((temp == NULL))
    {
        printf("\n\t\t*** Queue is empty.***");
    }
    else
    {
        printf("\n\t\t*** Queue is not empty.***");
    }
}

/* Function to Insert or Push Elements in the Queue */
node* push(node *temp, int value)
{
    node *head = temp, *new_node;
    if (temp == NULL)
    {
        node *new_head;
        new_head = (node*) malloc(sizeof (node) );
        new_head->value = value;
        new_head->next = NULL;
        return new_head;
    }
    while(temp->next)
        temp = temp->next;
    new_node = (node*) malloc(sizeof (node) );
    new_node->value = value;
    new_node->next = NULL;
    temp->next = new_node;
    return head;
}

/* Function to Pop Value from the Queue */
node* pop(node *temp)
{
    if(temp != NULL)
    {
        node *new_head = temp->next;
        printf("\n\t\t*** Deleted value : %d ***", temp->value);
        free(temp);
        return new_head;
    }
    printf("\n\t\t*** No Elements Left, Empty Queue ***");
    return temp;
}

/* Function to Return Queue Size */
void queue_size(node *temp)
{
    int count = 0;
    while (temp != NULL)
    {
        temp = temp->next;
        count++;
    }
    printf("\n\t\t*** Queue size is: %d ***", count);
}

/* Function to Return the First or Top Element of Queue */
void top(node *temp)
{
    if(temp != NULL)
    {
        printf("\n\t\t*** Top element : %d ***", temp->value);
    }
    else
    {
        printf("\n\t\t*** No Top element in Queue, as Queue is Empty ***");
    }
}
